// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String @id @default(uuid())
  authId String @unique // clerk's unique userId

  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[]
  ratings   Rating[]
  cart      Cart?
}

enum Role {
  ADMIN
  USER
  FARMER
}

model Product {
  id          String     @id @default(uuid())
  title       String
  description String     @db.Text
  price       Decimal    @db.Decimal(10, 2)
  imageUrl    String     @default("")
  stock       Int        @default(0)
  unit        String
  harvestDate DateTime?
  expiryDate  DateTime?
  rating      Float      @default(0)
  isOrganic   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  farmers     Farmer[]
  categories  Category[]
  tags        Tag[]
  purchases   Purchase[]
  ratings     Rating[]
  cartItems   CartItem[]
}

model Farmer {
  id          String    @id @default(uuid())
  name        String    @unique
  description String    @db.Text
  location    String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Purchase {
  id              String         @id @default(uuid())
  userId          String
  productId       String
  amount          Decimal        @db.Decimal(10, 2)
  quantity        Int            @default(1)
  status          PurchaseStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  product         Product        @relation(fields: [productId], references: [id])
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  SHIPPED
  DELIVERED
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int
  comment   String   @db.Text
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}
